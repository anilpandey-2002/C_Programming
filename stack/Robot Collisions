#include <vector>
#include <algorithm>
using namespace std;

struct Robot {
  int index;
  int position;
  int health;
  char direction;
};

class Solution {
 public:
  vector<int> survivedRobotsHealths(vector<int>& positions,
                                    vector<int>& healths, string directions) {
    int n = positions.size();
    vector<Robot> robots(n);

    for (int i = 0; i < n; ++i)
      robots[i] = {i, positions[i], healths[i], directions[i]};

    sort(robots.begin(), robots.end(), [](const Robot& a, const Robot& b) {
      return a.position < b.position;
    });

    vector<Robot> st;

    for (auto& robot : robots) {
      if (robot.direction == 'R') {
        st.push_back(robot);
      } else {
        while (!st.empty() && st.back().direction == 'R' && robot.health > 0) {
          if (st.back().health < robot.health) {
            robot.health--;
            st.pop_back();
          } else if (st.back().health > robot.health) {
            st.back().health--;
            robot.health = 0;
          } else {
            st.pop_back();
            robot.health = 0;
          }
        }
        if (robot.health > 0) {
          st.push_back(robot);
        }
      }
    }

    sort(st.begin(), st.end(), [](const Robot& a, const Robot& b) {
      return a.index < b.index;
    });

    vector<int> a;
    for (auto& robot : st) {
      a.push_back(robot.health);
    }

    return a;
  }
};
