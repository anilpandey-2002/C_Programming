#include <vector>
#include <numeric>
#include <algorithm>

using namespace std;

class UnionFind {
 public:
  UnionFind(int n) : count(n), parent(n), rank(n, 0) {
    iota(parent.begin(), parent.end(), 0);
  }

  bool unionByRank(int u, int v) {
    int rootU = find(u), rootV = find(v);
    if (rootU == rootV) return false;
    if (rank[rootU] > rank[rootV]) {
      parent[rootV] = rootU;
    } else if (rank[rootU] < rank[rootV]) {
      parent[rootU] = rootV;
    } else {
      parent[rootV] = rootU;
      rank[rootU]++;
    }
    count--;
    return true;
  }

  int getCount() const {
    return count;
  }

 private:
  int count;
  vector<int> parent, rank;

  int find(int u) {
    if (parent[u] != u) parent[u] = find(parent[u]);
    return parent[u];
  }
};

class Solution {
 public:
  int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
    UnionFind alice(n), bob(n);
    int requiredEdges = 0;

    for (const auto& edge : edges) {
      if (edge[0] == 3 && alice.unionByRank(edge[1] - 1, edge[2] - 1)) {
        bob.unionByRank(edge[1] - 1, edge[2] - 1);
        requiredEdges++;
      }
    }

    for (const auto& edge : edges) {
      if (edge[0] == 1 && alice.unionByRank(edge[1] - 1, edge[2] - 1)) {
        requiredEdges++;
      } else if (edge[0] == 2 && bob.unionByRank(edge[1] - 1, edge[2] - 1)) {
        requiredEdges++;
      }
    }

    if (alice.getCount() > 1 || bob.getCount() > 1) return -1;

    return edges.size() - requiredEdges;
  }
};
