class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> graph(n);
        vector<int> id(n, 0);
        vector<set<int>> a(n);

        for (const auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            ++id[edge[1]];
        }

        queue<int> q;
        for (int i = 0; i < n; ++i)
            if (id[i] == 0)
                q.push(i);

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            for (const int b : graph[node]) {
                a[b].insert(node);
                a[b].insert(a[node].begin(), a[node].end());
                if (--id[b] == 0)
                    q.push(b);
            }
        }

        vector<vector<int>> result(n);
        for (int i = 0; i < n; ++i)
            result[i].assign(a[i].begin(), a[i].end());

        return result;
    }
};
