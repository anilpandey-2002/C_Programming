class Solution {
public:
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        const auto distToThief = getDistToThief(grid);
        int l = 0, r = grid.size() * 2;

        while (l < r) {
            int m = (l + r) / 2;
            if (hasValidPath(distToThief, m))
                l = m + 1;
            else
                r = m;
        }

        return l - 1;
    }

private:
    static constexpr int dirs[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    bool hasValidPath(const vector<vector<int>>& distToThief, int safeness) {
        if (distToThief[0][0] < safeness)
            return false;

        int n = distToThief.size();
        queue<pair<int, int>> q;
        vector<vector<bool>> seen(n, vector<bool>(n, false));
        q.emplace(0, 0);
        seen[0][0] = true;

        while (!q.empty()) {
            auto [i, j] = q.front(); q.pop();
            if (distToThief[i][j] < safeness)
                continue;
            if (i == n - 1 && j == n - 1)
                return true;

            for (const auto& [dx, dy] : dirs) {
                int x = i + dx, y = j + dy;
                if (x >= 0 && x < n && y >= 0 && y < n && !seen[x][y]) {
                    q.emplace(x, y);
                    seen[x][y] = true;
                }
            }
        }

        return false;
    }

    vector<vector<int>> getDistToThief(const vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> distToThief(n, vector<int>(n, -1));
        queue<pair<int, int>> q;

        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (grid[i][j] == 1) {
                    q.emplace(i, j);
                    distToThief[i][j] = 0;
                }

        while (!q.empty()) {
            auto [i, j] = q.front(); q.pop();
            for (const auto& [dx, dy] : dirs) {
                int x = i + dx, y = j + dy;
                if (x >= 0 && x < n && y >= 0 && y < n && distToThief[x][y] == -1) {
                    distToThief[x][y] = distToThief[i][j] + 1;
                    q.emplace(x, y);
                }
            }
        }

        return distToThief;
    }
};//2812
