class Solution {
 public:
  int numIslands(vector<vector<char>>& grid) {
    constexpr int dirs[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    const int a = grid.size();
    const int b = grid[0].size();
    int c = 0;

    auto bfs = [&](int r, int c) {
      queue<pair<int, int>> q{{{r, c}}};
      grid[r][c] = '2';  
      while (!q.empty()) {
        const auto [i, j] = q.front();
        q.pop();
        for (const auto& [dx, dy] : dirs) {
          const int d = i + dx;
          const int e = j + dy;
          if (d < 0 || d == a || e < 0 || e == b)
            continue;
          if (grid[d][e] != '1')
            continue;
          q.emplace(d, e);
          grid[d][e] = '2';  // Mark '2' as visited.
        }
      }
    };

    for (int i = 0; i < a; ++i)
      for (int j = 0; j < b; ++j)
        if (grid[i][j] == '1') {
          bfs(i, j);
          ++c;
        }

    return c;
  }
};//200
